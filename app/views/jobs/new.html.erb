<% @work_categories = WorkCategory.all %>

<% provide(:title, 'New Job') %>

<h1>Create New Job</h1>
<div class="row">
  <div class="span12 offset2">
    <%= nested_form_for(@job) do |f| %>

      <%= render 'shared/error_messages', object: f.object %>

      <%= f.label :name, "Job Name" %><br />
      <%= f.text_field :name %> <br>

      <table>
        <caption><h4>Work Items</h4></caption>
        <thead>
          <tr>
            <th>Task</th>
            <th>Unit Price</th>
            <th>Quantity</th>
            <th class="cost-column">Cost</th>
          </tr>
        </thead>
          <tbody id="work-item-body">
          <%= f.fields_for :work_items, wrapper: false do |wi_form| %>

            <% item_id = @job.work_items.index(wi_form.object) %>
            <tr class="work-items fields" data-column="<%= item_id %>">
              <td>
                <%= wi_form.collection_select(:work_category_id, @work_categories, 
                                            :id, :name, :include_blank => true) %>
              </td>

              <td class="category-detail"></td>


              <td class="work-item-amount">
                <%= wi_form.text_field :work_amount, class: "work-item-amount" %>
                <%= wi_form.label :work_amount, "&nbsp".html_safe %>
              </td>

              <td class="work-item-cost">
              </td>
            </tr>

          <% end %>
          <tr>
            <td><%= f.link_to_add "Add a Work Item", :work_items %></td>
            <td></td>
            <td></td>
            <td></td>
          </tr>
        </tbody>
        <tfoot>
          <tr>
            <td></td>
            <td></td>
            <td></td>
            <td id="job-total-cost">0</td>
          </tr>
        </tfoot>
      </table>



      <%= f.submit "Save Job", class: "btn btn-large btn-primary" %>
    <% end %>
  </div>
</div>

<div id="work_categories" style="display:none">
  <% @work_categories.each do |item| %>
    <div id="work_category_<%= item.id %>">
      $<%= item.price_per_unit %> per
      <%= item.unit %>
    </div>
  <% end %>
</div>
      
<script>

  var contractr = {};
  contractr.work_categories = <%= raw @work_categories.to_json(only: [:id, :name, :price_per_unit, :unit]) %>

  $(document).ready(function(){
    window.NestedFormEvents.prototype.insertFields = function(content, assoc, link) {
      var $tr = $(link).closest('tr');
      return $(content).insertBefore($tr);
    }

    $(document).on('nested:fieldAdded:work_items', function(event){
      // this field was just inserted into your form
      var $field = event.field; 
      var num_columns = $('.work-items').length;
      $field.attr('data-column', num_columns)
      console.log($field);
      // it's a jQuery object already! Now you can find date input
      var $select = $field.find('select');
      contractr.updateCategoryDetailOnChange($select);

      var $amount_input = $field.find('.work-item-amount input');
      contractr.updateCostOnKeyUp($amount_input);
    })
  });

  $(document).ready(function(){


    contractr.updateCategoryDetailOnChange = function($bindSelection){
      $bindSelection.change(function(){
        var $me = $(this);
        var category_id = $me.find(':selected').val();
        var $col = contractr.getParentColumn$($me);
        if(category_id == ""){
          $col.find('.category-detail').empty();
          $col.find('.work-item-amount label').empty();
          contractr.clear_cost($me);
        } else {

          //TODO: eat this data and output via template
          // I would prefer to extract data from contractr.work_items[id],
          // create a template, and render with underscore
          var category_html = $('#work_category_' + category_id).html();
          $col.find('.category-detail').html(category_html);

          // json object (contractr.work_categories) is indexed from 0 rather than 1
          var unit = contractr.work_categories[category_id-1]["unit"];
          $col.find('.work-item-amount label').html(unit);

          contractr.clear_cost($me);
        }
      });
    }

    contractr.updateCostOnKeyUp = function($bindSelection){
      // entering input into "amount" column will update "cost" and "total_cost"
      $bindSelection.keyup(function(){
        var $me = $(this);
        var amount = $me.val();
        var selected_id = $me.closest('.work-items').find(':selected').attr('value');

        // Exit if no category is selected
        if(selected_id == 0){
          return;
        }
        var price_per_unit = contractr.work_categories[selected_id-1].price_per_unit;
        var $col = contractr.getParentColumn$($me);
        $col.find('.work-item-cost').html(Math.round((amount * price_per_unit)*100)/100);

        // update the total by summing the work-items which have valid values
        var total = 0;
        $('.work-items .work-item-cost').each(function(){
          var cost_value = parseFloat($(this).html());
          if(!isNaN(cost_value)){
            total += cost_value;
          }
        });
        $('#job-total-cost').html(total);
      });
    }

    // Helper functions on the "contractr" namspace
    contractr.getParentColumn$ = function($child_of_column)
    {
      var column_id = $child_of_column.closest('.work-items').attr('data-column');
      return $('tr.work-items[data-column="'+column_id+'"]');
    }

    contractr.clear_cost = function($category_option)
    {
      // empty the current amount since it's units probaly won't match
      var $column_root = $category_option.closest('.work-items');
      $column_root.find('.work-item-amount input').val("");
      $column_root.find('.work-item-cost').html("");
      $('#job-total-cost').html("???");
    }

    contractr.updateCategoryDetailOnChange($('.work-items select'));
    // TODO: should this be onChange as well?
    contractr.updateCostOnKeyUp($('.work-item-amount input'));
  });
</script>

    
   
